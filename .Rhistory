#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
top_n(1,sum(board))
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
count(board)%>%
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
count(board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(1,board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(1,board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)
top_n(1,board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
top_n(1,board)
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
top_n(1,board)
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
top_n(1,board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
df_main_clean%>%
top_n(1,board)
### your code
df_main_clean%>%
count(board)%>%
top_n(1,board)
### your result should be
#> # A tibble: 4 x 2
#>   board           n
#> * <chr>       <int>
#> 1 China-Drama   361
#> 2 EAseries      383
#> 3 KoreaDrama    369
#> 4 TaiwanDrama   344
### your code
df_main_clean%>%
count(board)
### your result should be
#> # A tibble: 4 x 2
#>   board           n
#> * <chr>       <int>
#> 1 China-Drama   361
#> 2 EAseries      383
#> 3 KoreaDrama    369
#> 4 TaiwanDrama   344
### your code
df_main_clean%>%
group_by(board)%>%
summarise(top_n(1,comments))
### your result should be
#> # A tibble: 4 x 2
#>   board       comments_max
#> * <chr>              <dbl>
#> 1 China-Drama          825
#> 2 EAseries            1499
#> 3 KoreaDrama          1498
#> 4 TaiwanDrama         1413
### your code
df_main_clean%>%
group_by(board)%>%
top_n(1,comments)%>%
summarise(comments_max=sum(comments))
### your result should be
#> # A tibble: 4 x 2
#>   board       comments_max
#> * <chr>              <dbl>
#> 1 China-Drama          825
#> 2 EAseries            1499
#> 3 KoreaDrama          1498
#> 4 TaiwanDrama         1413
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(1,board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(1,n)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
df_main_clean%>%
filter(date %in% c("2021-02-23","2021-02-24","2021-02-25","2021-02-26","2021-02-27","2021-02-28","2021-03-01"))%>%
count(board)%>%
top_n(1,n)
### your result should be
#> # A tibble: 1 x 2
#>   board        n
#>   <chr>    <int>
#> 1 EAseries    56
### your code
library(dplyr)
df_gapminder_raw<-read.table("data/AS03/gapminder_raw.tsv",header=FALSE,sep = "\t",na.strings = "NA",quote="")
colnames(df_gapminder_raw) <- c("country", "continent","year","lifeExp","pop","gdpPercap")
### your result should be
#> # A tibble: 1,704 x 6
#>    country     continent  year lifeExp      pop gdpPercap
#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Afghanistan Asia       1952    28.8  8425333      779.
#>  2 Afghanistan Asia       1957    30.3  9240934      821.
#>  3 Afghanistan Asia       1962    32.0 10267083      853.
#>  4 Afghanistan Asia       1967    34.0 11537966      836.
#>  5 Afghanistan Asia       1972    36.1 13079460      740.
#>  6 Afghanistan Asia       1977    38.4 14880372      786.
#>  7 Afghanistan Asia       1982    39.9 12881816      978.
#>  8 Afghanistan Asia       1987    40.8 13867957      852.
#>  9 Afghanistan Asia       1992    41.7 16317921      649.
#> 10 Afghanistan Asia       1997    41.8 22227415      635.
#> # … with 1,694 more rows
### your code
library(dplyr)
df_gapminder_raw<-read.table("data/AS03/gapminder_raw.tsv",header=FALSE,sep = "\t",na.strings = "NA",quote="")
colnames(df_gapminder_raw) <- c("country", "continent","year","lifeExp","pop","gdpPercap")
df_gapminder_raw
### your result should be
#> # A tibble: 1,704 x 6
#>    country     continent  year lifeExp      pop gdpPercap
#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Afghanistan Asia       1952    28.8  8425333      779.
#>  2 Afghanistan Asia       1957    30.3  9240934      821.
#>  3 Afghanistan Asia       1962    32.0 10267083      853.
#>  4 Afghanistan Asia       1967    34.0 11537966      836.
#>  5 Afghanistan Asia       1972    36.1 13079460      740.
#>  6 Afghanistan Asia       1977    38.4 14880372      786.
#>  7 Afghanistan Asia       1982    39.9 12881816      978.
#>  8 Afghanistan Asia       1987    40.8 13867957      852.
#>  9 Afghanistan Asia       1992    41.7 16317921      649.
#> 10 Afghanistan Asia       1997    41.8 22227415      635.
#> # … with 1,694 more rows
### your code
library(dplyr)
df_gapminder_raw<-read.table("data/AS03/gapminder_raw.tsv",header=FALSE,sep = "\t",na.strings = "NA",quote="")
colnames(df_gapminder_raw) <- c("country", "continent","year","lifeExp","pop","gdpPercap")
df_gapminder_raw[1:3,]
### your result should be
#> # A tibble: 1,704 x 6
#>    country     continent  year lifeExp      pop gdpPercap
#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Afghanistan Asia       1952    28.8  8425333      779.
#>  2 Afghanistan Asia       1957    30.3  9240934      821.
#>  3 Afghanistan Asia       1962    32.0 10267083      853.
#>  4 Afghanistan Asia       1967    34.0 11537966      836.
#>  5 Afghanistan Asia       1972    36.1 13079460      740.
#>  6 Afghanistan Asia       1977    38.4 14880372      786.
#>  7 Afghanistan Asia       1982    39.9 12881816      978.
#>  8 Afghanistan Asia       1987    40.8 13867957      852.
#>  9 Afghanistan Asia       1992    41.7 16317921      649.
#> 10 Afghanistan Asia       1997    41.8 22227415      635.
#> # … with 1,694 more rows
### your code
df_gapminder_raw%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
df_gapminder_clean
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
print("因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏其他欄位數字的國家就移除掉。")
# 範例答案：我覺得 missing value 看了令人很不舒服，數值變數應該都改成 88 比較吉利，數值變數以外都應該改成 "others"
df_gapminder_raw%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
df_gapminder_clean
### your code
df_gapminder_raw%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
df_gapminder_clean[1:3,]
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
print("因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏其他欄位數字的國家就移除掉。")
# 範例答案：我覺得 missing value 看了令人很不舒服，數值變數應該都改成 88 比較吉利，數值變數以外都應該改成 "others"
### your text (把文字描述寫在 code chunk 中)
print("因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏其他欄位數字的國家就移除掉。")
### your text (把文字描述寫在 code chunk 中)
print("因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。")
### your code
df_gapminder_clean%>%
filter(country=="Taiwan")
### your result should be
#> # A tibble: 12 x 6
#>    country continent  year lifeExp      pop gdpPercap
#>    <chr>   <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Taiwan  Asia       1952    58.5  8550362     1207.
#>  2 Taiwan  Asia       1957    62.4 10164215     1508.
#>  3 Taiwan  Asia       1962    65.2 11918938     1823.
#>  4 Taiwan  Asia       1967    67.5 13648692     2644.
#>  5 Taiwan  Asia       1972    69.4 15226039     4063.
#>  6 Taiwan  Asia       1977    70.6 16785196     5597.
#>  7 Taiwan  Asia       1982    72.2 18501390     7426.
#>  8 Taiwan  Asia       1987    73.4 19757799    11055.
#>  9 Taiwan  Asia       1992    74.3 20686918    15216.
#> 10 Taiwan  Asia       1997    75.2 21628605    20207.
#> 11 Taiwan  Asia       2002    77.0 22454239    23235.
#> 12 Taiwan  Asia       2007    78.4 23174294    28718.
### your text
print("台灣的人口預期壽命、人口數和人均GDP都逐年上升。")
### your text
print("台灣的人口預期壽命、人口數和人均GDP都逐年上升。")
### your text
print("我把有數值missing value的國家資料刪掉了！在計算平均壽命時，就不會納入這些國家的數字，很遺憾。")
### your code
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)%>%
head(df_gapminder_clean,3)
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)%>%
### your code
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)%>%
head(df_gapminder_clean,3)
### your code
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)%>%
### your result should be
# 看你怎麼處理 missing value，結果會有不同
### your code
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)
### your result should be
# 看你怎麼處理 missing value，結果會有不同
### your code
df_gapminder_clean %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
as_tibble(select(country,total_gdp,lifeExp))
### your code
as_tibble(df_gapminder_clean) %>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)
### your result should be
# 看你怎麼處理 missing value，結果會有不同
### your code
as_tibble(df_gapminder_clean) %>%
filter(continent=="Asia"&year==1972)%>%
mutate(total_gdp=pop*gdpPercap)%>%
arrange(desc(lifeExp))%>%
select(country,total_gdp,lifeExp)
### your result should be
# 看你怎麼處理 missing value，結果會有不同
### your code
df_main_clean<-read.csv("data/AS03/df_main_clean.csv")
as_tibble(df_main_clean)
### your result should be
#> # A tibble: 1,457 x 10
#>    board  type   title   date       comments author  text      IP       link
#>    <chr>  <chr>  <chr>   <date>        <dbl> <chr>   <chr>     <chr>    <chr>
#>  1 Korea… [公告] Fw: [公… 2021-01-18       20 XDDDD5… "┌──┬│┌─… "※ 發信站:… https:/…
#>  2 Korea… [新聞] [新聞] 柳… 2021-01-18        5 jinyi … "演員柳惠英被提… "※ 發信站:… https:/…
#>  3 Korea… [閒聊] [閒聊]  … 2021-01-18      101 jay947… "花了幾個週末把… "※ 發信站:… https:/…
#>  4 Korea… [新聞] [新聞] 孫… 2021-01-18        9 jinyi … "據多名電視臺相… "※ 發信站:… https:/…
#>  5 Korea… [LIVE] [LIVE]… 2021-01-18      249 kawasa… "前輩，那支口紅… "※ 發信站:… https:/…
#>  6 Korea… [LIVE] [LIVE]… 2021-01-18      406 tcchen… "劇名:▁▁▁▁… "※ 發信站:… https:/…
#>  7 Korea… [LIVE] [LIVE]… 2021-01-18       80 diana8… "───────… "※ 發信站:… https:/…
#>  8 Korea… [心得] [心得] 惡… 2021-01-18       28 analyt… "最後一集到底來… "※ 發信站:… https:/…
#>  9 Korea… [求薦] [求薦] 想… 2021-01-18      214 greenb… "1.重刷doc… "※ 發信站:… https:/…
#> 10 Korea… <NA>   看完13集驅… 2021-01-19       35 patty6… "不知道各位大大… "※ 發信站:… https:/…
#> # … with 1,447 more rows, and 1 more variable: time <dttm>
### your code
library(dplyr)
df_gapminder_raw<-read.table("data/AS03/gapminder_raw.tsv",header=FALSE,sep = "\t",na.strings = "NA",quote="")
colnames(df_gapminder_raw) <- c("country", "continent","year","lifeExp","pop","gdpPercap")
as_tibble(df_gapminder_raw)
### your result should be
#> # A tibble: 1,704 x 6
#>    country     continent  year lifeExp      pop gdpPercap
#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Afghanistan Asia       1952    28.8  8425333      779.
#>  2 Afghanistan Asia       1957    30.3  9240934      821.
#>  3 Afghanistan Asia       1962    32.0 10267083      853.
#>  4 Afghanistan Asia       1967    34.0 11537966      836.
#>  5 Afghanistan Asia       1972    36.1 13079460      740.
#>  6 Afghanistan Asia       1977    38.4 14880372      786.
#>  7 Afghanistan Asia       1982    39.9 12881816      978.
#>  8 Afghanistan Asia       1987    40.8 13867957      852.
#>  9 Afghanistan Asia       1992    41.7 16317921      649.
#> 10 Afghanistan Asia       1997    41.8 22227415      635.
#> # … with 1,694 more rows
### your code
df_gapminder_raw%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
as_tibble(df_gapminder_clean)
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。
### your text (把文字描述寫在 code chunk 中)
print("因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。")
### your code
df_gapminder_raw%>%
# filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
### your code
# df_gapminder_raw%>%
# filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
as_tibble(df_gapminder_clean)
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。
### your code
# df_gapminder_raw%>%
# filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
as_tibble(df_gapminder_clean)
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
"因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。"
# 範例答案：我覺得 missing value 看了令人很不舒服，數值變數應該都改成 88 比較吉利，數值變數以外都應該改成 "others"
df_gapminder_clean<-df_gapminder_raw[is.na(df_gapminder_raw$continent),"continent"]<-"Asia"
df_gapminder_clean <- df_gapminder_raw[complete.cases(df_gapminder_raw), ]
as_tibble(df_gapminder_clean)
### your result should be
# 不一定，看你怎麼處理資料
### your text (把文字描述寫在 code chunk 中)
"因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。"
# 範例答案：我覺得 missing value 看了令人很不舒服，數值變數應該都改成 88 比較吉利，數值變數以外都應該改成 "others"
### your code
df_gapminder_raw%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
### your code
as_tibble(df_gapminder_raw)%>%
filter(is.na(continent)|is.na(year)|is.na(lifeExp)|is.na(pop)|is.na(gdpPercap))
### your text (把文字描述寫在 code chunk 中)
"因為知道Nepal是位於亞洲，所以將遺漏的continent資料手動補上，其他遺漏欄位數字的國家就移除掉。"
### your code
df_gapminder_clean%>%
filter(country=="Taiwan")
### your result should be
#> # A tibble: 12 x 6
#>    country continent  year lifeExp      pop gdpPercap
#>    <chr>   <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Taiwan  Asia       1952    58.5  8550362     1207.
#>  2 Taiwan  Asia       1957    62.4 10164215     1508.
#>  3 Taiwan  Asia       1962    65.2 11918938     1823.
#>  4 Taiwan  Asia       1967    67.5 13648692     2644.
#>  5 Taiwan  Asia       1972    69.4 15226039     4063.
#>  6 Taiwan  Asia       1977    70.6 16785196     5597.
#>  7 Taiwan  Asia       1982    72.2 18501390     7426.
#>  8 Taiwan  Asia       1987    73.4 19757799    11055.
#>  9 Taiwan  Asia       1992    74.3 20686918    15216.
#> 10 Taiwan  Asia       1997    75.2 21628605    20207.
#> 11 Taiwan  Asia       2002    77.0 22454239    23235.
#> 12 Taiwan  Asia       2007    78.4 23174294    28718.
### your text
台灣的人口預期壽命、人口數和人均GDP都逐年上升。
### your text
"台灣的人口預期壽命、人口數和人均GDP都逐年上升。"
### your code
df_gapminder_clean%>%
filter(country=="Taiwan")
### your result should be
#> # A tibble: 12 x 6
#>    country continent  year lifeExp      pop gdpPercap
#>    <chr>   <chr>     <dbl>   <dbl>    <dbl>     <dbl>
#>  1 Taiwan  Asia       1952    58.5  8550362     1207.
#>  2 Taiwan  Asia       1957    62.4 10164215     1508.
#>  3 Taiwan  Asia       1962    65.2 11918938     1823.
#>  4 Taiwan  Asia       1967    67.5 13648692     2644.
#>  5 Taiwan  Asia       1972    69.4 15226039     4063.
#>  6 Taiwan  Asia       1977    70.6 16785196     5597.
#>  7 Taiwan  Asia       1982    72.2 18501390     7426.
#>  8 Taiwan  Asia       1987    73.4 19757799    11055.
#>  9 Taiwan  Asia       1992    74.3 20686918    15216.
#> 10 Taiwan  Asia       1997    75.2 21628605    20207.
#> 11 Taiwan  Asia       2002    77.0 22454239    23235.
#> 12 Taiwan  Asia       2007    78.4 23174294    28718.
### your text
"台灣的人口預期壽命、人口數和人均GDP都逐年上升。"
### your code
df_gapminder_clean%>%
group_by(continent)%>%
summarise(continent_life=mean(lifeExp))
### your result should be
# 看你怎麼處理 missing value，結果會有不同
### your text
"我把有數值missing value的國家資料刪掉了！在計算平均壽命時，就不會納入這些國家的數字，很遺憾。"
# 範例：如前所述，我把數值變數的 missing value 都變成 88，在取平均的時候會有影響，感覺不是好事，但我懶得改
